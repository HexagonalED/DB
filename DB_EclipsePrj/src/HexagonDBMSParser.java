/* Generated By:JavaCC: Do not edit this line. HexagonDBMSParser.java */
import com.sleepycat.je.*;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import java.io.*;
import java.util.*;

class pair
{
  String type; //keyvalue
  String defined;

  public pair(String defined, String type)
  {
    this.defined = defined;
    this.type = type;
  }
}

class tableElement
{
  String [] element;

  //String tableName;
  public tableElement(String [] ss /*,String tableName*/)
  {
    this.element = ss;
    //this.tableName = tableName;
  }

  public pair define()
  {
    int len;
    String ret = "";
    String type;
    if (element [0].equals("primary"))
    {
      type = "primary";
      len = element.length - 1;
      ret = element [1].toLowerCase();
      for (int i = 2; i < element.length; i++)
      {
        ret += "," + element [i].toLowerCase();
      }
    }
    else if (element [0].equals("foreign"))
    {
      String refTableName = element [1].toLowerCase();
      len = element.length / 2 - 1;
      type = "foreign" + "[" + refTableName + "]";
      ret = element [2].toLowerCase() + "," + element [3].toLowerCase();
      for (int i = 1; i < len; i++)
      {
        ret += ",," + element [i * 2 + 2].toLowerCase() + "," + element [i * 2 + 3].toLowerCase();
      }
    }
    else
    {
      if (element.length != 4)
      {
        //error - columnDef parsed incorrectly
        return null;
      }
      else
      {
        String colName = element [0].toLowerCase();
        boolean isNull = (element [3].toLowerCase().equals("null"));
        type = "column[" + colName + "]";
        ret = "[";
        if (element [1].toLowerCase().equals("int"))
        ret += "int]";
        else if (element [1].toLowerCase().equals("char"))
        ret += "char(" + element [2] + ")]";
        else if (element [1].toLowerCase().equals("date"))
        ret += "date]";
        if (isNull)
        {
          //ret+="[null]";
        }
        else
        {
          ret += "[not null]";
        }
      }
    }
    return new pair(ret, type);
  }
}

class StringResponse
{
  public String syntaxError = "Syntax error";

  public String DuplicateColumnDefError = "Create table has failed: column definition is duplicated";

  public String DuplicatePrimaryKeyDefError = "Create table has failed: primary key definition is duplicated";

  public String ReferenceTypeError = "Create table has failed: foreign key references wrong type";

  public String ReferenceNonPrimaryKeyError = "Create table has failed: foreign key references non primary key columns non primary key column";

  public String ReferenceColumnExistenceError = "Create table has failed: foreign key references non existing column";

  public String ReferenceTableExistenceError = "Create table has failed: foreign key references non existing table";

  public String TableExistenceError = "Create table has failed: table with the same name already exists";

  public String ShowTablesNoTable = "There is no table";

  public String NoSuchTable = "No such table";

  public String CharLengthError = "Char length should be Char length should be over 0";

  public String CreateTableSuccess(String tableName)
  {
    return "'" + tableName + "'" + " table is created";
  }

  public String NonExistingColumnDefError(String colName)
  {
    return "Create table has failed: '" + colName + "' does not exists in column definition";
  }

  public String DropSuccess(String tableName)
  {
    return "'" + tableName + "' table is dropped";
  }

  public String DropReferencedTableError(String tableName)
  {
    return "Drop table has failed: '" + tableName + "' is referenced by other table";
  }
}

public class HexagonDBMSParser implements HexagonDBMSParserConstants {
  public static final int PRINT_SYNTAX_ERROR = 0;

  public static final int PRINT_CREATE_TABLE = 1;

  public static final int PRINT_DROP_TABLE = 2;

  public static final int PRINT_DESC = 3;

  public static final int PRINT_INSERT = 4;

  public static final int PRINT_DELETE = 5;

  public static final int PRINT_SELECT = 6;

  public static final int PRINT_SHOW_TABLES = 7;

  public static StringResponse res = new StringResponse();

  private static Environment hexaEnv = null;

  private static Database hexaDB = null;

  private static void openDB(String dbName)
  {
    EnvironmentConfig envConf = new EnvironmentConfig();
    envConf.setAllowCreate(true);
    hexaEnv = new Environment(new File("db/"), envConf);
    DatabaseConfig dbConf = new DatabaseConfig();
    dbConf.setAllowCreate(true);
    dbConf.setSortedDuplicates(true);
    hexaDB = hexaEnv.openDatabase(null, dbName, dbConf);
    Cursor cur = null;
    DatabaseEntry key;
    DatabaseEntry data;
    try
    {
      cur = hexaDB.openCursor(null, null);
      key = new DatabaseEntry("tableList:".getBytes("UTF-8"));
      data = new DatabaseEntry("".getBytes("UTF-8"));
      cur.put(key, data);
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
  }

  private static void closeDB()
  {
    if (hexaDB != null) hexaDB.close();
    if (hexaEnv != null) hexaEnv.close();
  }

  public static void main(String args []) throws ParseException
  {
    HexagonDBMSParser parser = new HexagonDBMSParser(System.in);
    openDB("HexaDB");
    while (true)
    {
      System.out.print("HexagonDB_2012-11253> ");
      try
      {
        if (!parser.command())
        {
          if (hexaDB != null) hexaDB.close();
          if (hexaEnv != null) hexaEnv.close();
        }
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        e.printStackTrace();
        HexagonDBMSParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  public static void printMessage(int q)
  {
    switch (q)
    {
      case PRINT_SYNTAX_ERROR :
      System.out.println("Syntax error");
      break;
      case PRINT_CREATE_TABLE :
      System.out.println("\u005c'CREATE TABLE\u005c' requested");
      break;
      case PRINT_DROP_TABLE :
      System.out.println("\u005c'DROP TABLE\u005c' requested");
      break;
      case PRINT_DESC :
      System.out.println("\u005c'DESC\u005c' requested");
      break;
      case PRINT_INSERT :
      System.out.println("\u005c'INSERT\u005c' requested");
      break;
      case PRINT_DELETE :
      System.out.println("\u005c'DELETE\u005c' requested");
      break;
      case PRINT_SELECT :
      System.out.println("\u005c'SELECT\u005c' requested");
      break;
      case PRINT_SHOW_TABLES :
      System.out.println("\u005c'SHOW TABLES\u005c' requested");
      break;
    }
  }

  public static void createTable(String name, ArrayList < tableElement > li) throws ParseException
  { // name
    // =
    // tableName,
    // li
    // =
    // tableElements
    // printMessage(q);
    // manage data input
    pair [] elementsDefined = new pair [li.size()];
    ArrayList < String > columns = new ArrayList < String > ();
    ArrayList < String > primary = new ArrayList < String > ();
    ArrayList < String > foreign = new ArrayList < String > ();
    String tableList = "";
    // tableName Check
    Cursor cur = null;
    cur = hexaDB.openCursor(null, null);
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();
    try
    {
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        if (keyString.equals("tableList:"))
        {
          tableList = dataString;
          break;
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    if (tableList.indexOf(name) >= 0)
    {
      System.out.println(res.TableExistenceError);
      return;
    }
    // columns check
    for (int i = 0; i < li.size(); i++)
    {
      tableElement t = li.get(i);
      elementsDefined [i] = t.define();
      if (elementsDefined [i].type.substring(0, 6).equals("column"))
      {
        String tempName = elementsDefined [i].type.substring(7, elementsDefined [i].type.length() - 1);
        if (columns.contains(tempName))
        {
          // DuplicateColumnDefError
          System.out.println(res.DuplicateColumnDefError);
          return;
        }
        else
        {
          columns.add(tempName);
        }
      }
      if (elementsDefined [i].defined.substring(0, 4).equals("[cha"))
      {
        if (Integer.parseInt(
        elementsDefined [i].defined.substring(6, elementsDefined [i].defined.indexOf(')'))) <= 0)
        {
          // CharLengthError
          System.out.println(res.CharLengthError);
          return;
        }
      }
    }
    // constraint check
    for (int i = 0; i < elementsDefined.length; i++)
    {
      boolean primaryExists = false;
      pair t = elementsDefined [i];
      if (t.type.substring(0, 6).equals("primar"))
      {
        if (primaryExists)
        {
          // DuplicatePrimaryKeyError
          System.out.println(res.DuplicatePrimaryKeyDefError);
          return;
        }
        else
        primaryExists = true;
        String [] primaryColumns = t.defined.split(",");
        for (int j = 0; j < primaryColumns.length; j++)
        {
          if (!columns.contains(primaryColumns [j]))
          {
            // NonExistingColumnDefError(#colName)
            System.out.println(res.NonExistingColumnDefError(primaryColumns [j]));
            return;
          }
          else
          {
            for (int k = 0; k < elementsDefined.length; k++)
            {
              if (elementsDefined [k].type.contains(primaryColumns [j]))
                if (elementsDefined [k].defined.indexOf("not null") < 0)
                        elementsDefined [k].defined += "[not null]";
            }
            primary.add(primaryColumns [j]);
          }
        }
      }
      else if (t.type.substring(0, 6).equals("foreig"))
      {
        String refTableName = t.defined.substring(8, t.defined.indexOf("]"));
        if (refTableName.equals(name))
        {
          // constraint error
          System.out.println("Constraint Error : foreign key refers its own table");
          return;
        }
        String [] list = tableList.split(",");
        boolean contains = false;
        for (int x = 0; x < list.length; x++)
        {
          if (list [x].equals(refTableName))
          contains = true;
        }
        if (!contains)
        {
          // ReferenceTableExistenceError
          System.out.println(res.ReferenceTableExistenceError);
          return;
        }
        String [] def = t.defined.substring(t.defined.indexOf(":") + 1).split(",,");
        String [] origList = new String [def.length];
        String [] foreiList = new String [def.length];
        for (int x = 0; x < def.length; x++)
        {
          String [] tmp = def [x].split(",");
          foreiList [x] = tmp [0];
          origList [x] = tmp [1];
        }
        boolean refColumnExistanceErr = false;
        boolean refNonPrimaryErr = false;
        boolean refTypeErr = false;
        ArrayList < String > origPrimary = new ArrayList < String > ();
        try
        {
          cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
          do
          {
            String keyString = new String(foundKey.getData(), "UTF-8");
            String dataString = new String(foundData.getData(), "UTF-8");
            if (keyString.indexOf("{" + refTableName + "}primary") >= 0)
            {
              String [] tmp = dataString.substring(8).split(",");
              for (int x = 0; x < tmp.length; x++)
              origPrimary.add(tmp [x]);
            }
            else
            continue;
          }
          while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
        }
        catch (DatabaseException de)
        {
        }
        catch (UnsupportedEncodingException e)
        {
          e.printStackTrace();
        }
        for (int x = 0; x < foreiList.length; x++)
        {
          if (!columns.contains(foreiList [x]))
          {
            // NonExistingColumnDefError(#colName)
            System.out.println(res.NonExistingColumnDefError(foreiList [x]));
            return;
          }
        }
        try
        {
          cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
          do
          {
            String keyString = new String(foundKey.getData(), "UTF-8");
            String dataString = new String(foundData.getData(), "UTF-8");
            for (int x = 0; x < origList.length; x++)
            {
              if (keyString.indexOf("{" + refTableName + "}column[" + origList [x] + "]") < 0)
              {
                refColumnExistanceErr = true;
              }
              else if (!origPrimary.contains(origList [x]))
              {
                refNonPrimaryErr = true;
              }
              else if (!dataString.equals(t.defined))
              {
                refTypeErr = true;
              }
              else
              continue;
            }
          }
          while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
        }
        catch (DatabaseException de)
        {
        }
        catch (UnsupportedEncodingException e)
        {
          e.printStackTrace();
        }
        if (refColumnExistanceErr)
        {
          System.out.println(res.ReferenceColumnExistenceError);
          return;
          // 2. ReferenceColumnExistenceError
        }
        if (refNonPrimaryErr)
        {
          // 3. ReferenceNonPrimaryKeyError
          System.out.println(res.ReferenceNonPrimaryKeyError);
          return;
        }
        if (refTypeErr)
        {
          System.out.println(res.ReferenceTypeError);
          return;
          // 4. ReferenceTypeError
        }
      }
      else
      continue;
    }
    // db insert
    DatabaseEntry key;
    DatabaseEntry data;
    try
    {
//create table account(ac_num int not null, bc_name char(15) not null, primary(ac_num));
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        if (keyString.equals("tableList:"))
        {
          cur.delete();
          if(tableList.equals(""))
            cur.put(new DatabaseEntry("tableList:".getBytes("UTF-8")), new DatabaseEntry((name).getBytes("UTF-8")));
          else
            cur.put(new DatabaseEntry("tableList:".getBytes("UTF-8")), new DatabaseEntry((tableList + "," + name).getBytes("UTF-8")));
          break;
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);

      cur = hexaDB.openCursor(null, null);
      for (int i = 0; i < li.size(); i++)
      {
        key = new DatabaseEntry(("{" + name + "}" + elementsDefined [i].type).getBytes("UTF-8"));
        data = new DatabaseEntry(elementsDefined [i].defined.getBytes("UTF-8"));
        cur.put(key, data);
      }
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    // print success message
    System.out.println("'"+name+"' table is created");
    if (cur != null) cur.close();
  }

  public static void dropTable(String name) throws ParseException
  {
    // db search
    Cursor cur = null;
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();
    String tableList = "";
    try
    {
      //check if table exists
      cur = hexaDB.openCursor(null, null);
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        if (keyString.equals("tableList:"))
        {
          tableList = dataString;
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
      if (tableList.indexOf(name) < 0)
      {
        System.out.println(res.NoSuchTable);
        return;
      }
      //check if table is referred
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        if (keyString.indexOf("}foreign[" + name + "]") >= 0)
        {
          System.out.println(res.DropReferencedTableError(name));
          return;
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
      //remove table elements
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        //edit tableList
        if (keyString.equals("tableList:"))
        {
          cur.delete();
          String newData = dataString;
          newData = newData.substring(0, newData.indexOf(name)) + newData.substring(newData.indexOf(name) + name.length());
          cur.put(new DatabaseEntry(keyString.getBytes("UTF-8")), new DatabaseEntry(newData.getBytes("UTF-8")));
          continue;
        }
        else if (keyString.contains("{" + name + "}"))
        {
          //remove {name}
          cur.delete();
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    //print success message
    System.out.println("'"+name+"' table is dropped");
    if (cur != null) cur.close();
  }

  public static void desc(String name) throws ParseException
  {
    // db search
    Cursor cur = null;
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();
    boolean noSuchTable = true;
    ArrayList < pair > retStrings = new ArrayList < pair > ();
    try
    {
      cur = hexaDB.openCursor(null, null);
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        if (keyString.contains("{" + name + "}"))
        {
          noSuchTable = false;
          retStrings.add(new pair(dataString, keyString));
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    if (noSuchTable)
    {
      System.out.println(res.NoSuchTable);
      return;
      // error
    }
    else
    {
      ArrayList<String> primary = new ArrayList<String >();
      ArrayList<String> foreign = new ArrayList<String >();
      ArrayList<String> columns = new ArrayList<String >();

      // print retStrings in form
      for(int i=0;i<retStrings.size();i++) {
        pair x =retStrings.get(i);
        if(x.type.equals("{"+name+"}primary")) {
          String[] tmp = x.defined.split(",");
          for(int j=0;j<tmp.length;j++) {
            primary.add(tmp[j]);
          }
        }
        else if (x.type.contains("{"+name+"}foreign")) {
          String[] tmp = x.defined.split(",,");
          for(int j=0;j<tmp.length;j++) {
            foreign.add(tmp[j].split(",")[0]);
          }
        }
      }

      for(int i=0;i<retStrings.size();i++) {
        pair x =retStrings.get(i);
        if(x.type.contains("{"+name+"}column")) {
          String colName = x.type.substring(name.length()+9,x.type.length()-2);
          String colData = colName+":"+x.defined;
          if(foreign.contains(colName)) {
            if(primary.contains(colName)) {
              colData+="{{PRI/FOR}}";
            }
            else {
              colData+="{{FOR}}";
            }
          }
          else if(primary.contains(colName)) {
            colData+="{{PRI}}";
          }
          columns.add(colData);
        }
      }
      System.out.println("-------------------------------------------------");
      System.out.println("table_name ["+name+"]");
      System.out.println("column_name\u005ct\u005cttype\u005ct\u005ctnull\u005ct\u005ctkey");
      for(int i=0;i<columns.size();i++) {
        String out = "";
        String col = columns.get(i);
        out+=col.split(":")[0]+"\u005ct\u005ct";
        out+=col.substring(1,col.indexOf("]"))+"\u005ct\u005ct";
        col = col.substring(col.indexOf("]")+1);
        if(col.charAt(0)=='[') {
          out+="N\u005ct\u005ct";
          col = col.substring(col.indexOf("]")+1);
        }
        else {
          out+="Y\u005ct\u005ct";
        }
        if(col.contains("{{")) {
          out+=col.substring(3,col.length()-2);
        }
        System.out.println(out);
      }
      System.out.println("-------------------------------------------------");
    }
    if (cur != null) cur.close();
  }

  public static void showTables() throws ParseException
  {
    // db search
    Cursor cur = null;
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();
    String tableList = "";
    try
    {
      cur = hexaDB.openCursor(null, null);
      cur.getFirst(foundKey, foundData, LockMode.DEFAULT);
      do
      {
        String keyString = new String(foundKey.getData(), "UTF-8");
        String dataString = new String(foundData.getData(), "UTF-8");
        if (keyString.substring(0, 10).equals("tableList:"))
        {
          tableList = dataString;
        }
      }
      while (cur.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
    }
    catch (DatabaseException de)
    {
    }
    catch (UnsupportedEncodingException e)
    {
      e.printStackTrace();
    }
    if (tableList.equals(""))
    {
      // showTablesNoTables
      System.out.println(res.ShowTablesNoTable);
      return;
    }
    else
    {
      // print tables in order
      System.out.println("----------------");
      String[] ret = tableList.split(",");
      for(int i=0;i<ret.length;i++) {
        System.out.println(ret[i]);
      }
      System.out.println("----------------");
    }
    if (cur != null) cur.close();
  }

  static final public boolean command() throws ParseException {
    if (jj_2_1(2)) {
      queryList();
      {if (true) return true;}
    } else if (jj_2_2(2)) {
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
    {if (true) return false;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void queryList() throws ParseException {
    query();
    jj_consume_token(SEMICOLON);
    label_1:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_1;
      }
      query();
      jj_consume_token(SEMICOLON);
    }
  }

  static final public int query() throws ParseException {
  int q;
    if (jj_2_4(2)) {
      createTableQuery();
        q = PRINT_CREATE_TABLE;
    } else if (jj_2_5(2)) {
      dropTableQuery();
        q = PRINT_DROP_TABLE;
    } else if (jj_2_6(2)) {
      descQuery();
        q = PRINT_DESC;
    } else if (jj_2_7(2)) {
      insertQuery();
        q = PRINT_INSERT;
    } else if (jj_2_8(2)) {
      deleteQuery();
        q = PRINT_DELETE;
    } else if (jj_2_9(2)) {
      selectQuery();
        q = PRINT_SELECT;
    } else if (jj_2_10(2)) {
      showTablesQuery();
        q = PRINT_SHOW_TABLES;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

//create table account (account_number int not null,branch_name char(15),primary key(account_number));
  static final public void createTableQuery() throws ParseException {
  String name;
  ArrayList < tableElement > li;
    jj_consume_token(CREATE_TABLE);
    name = tableName();
    li = tableElementList();
    createTable(name.toLowerCase(), li);
  }

  static final public ArrayList < tableElement > tableElementList() throws ParseException {
  ArrayList < tableElement > li;
  tableElement t;
    li = new ArrayList < tableElement > ();
    jj_consume_token(LEFT_PAREN);
    t = tableElement();
    li.add(t);
    label_2:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      t = tableElement();
      li.add(t);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return li;}
    throw new Error("Missing return statement in function");
  }

  static final public tableElement tableElement() throws ParseException {
  String [ ] ss;
    if (jj_2_12(2)) {
      ss = columnDefinition();
    {if (true) return new tableElement(ss);}
    } else if (jj_2_13(2)) {
      ss = tableConstraintDefinition();
    {if (true) return new tableElement(ss);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String [ ] columnDefinition() throws ParseException {
  String [ ] ret;
  String s;
  Token [ ] ss;
  boolean b;
  Token t;
    t = null;
    b = false;
    ret = new String [ 4 ];
    s = columnName();
    ss = dataType();
    if (jj_2_14(2)) {
      t = jj_consume_token(NOT_NULL);
    } else {
      ;
    }
    if (t != null)
    b = true;
    ret [ 0 ] = s;
    ret [ 1 ] = ss [ 0 ].image;
    if (ss [ 1 ] != null)
    ret [ 2 ] = ss [ 1 ].image;
    else
    ret [ 2 ] = "";
    if (b)
    {
      ret [ 3 ] = "not null";
    }
    else ret [ 3 ] = "null";
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public String [ ] tableConstraintDefinition() throws ParseException {
  String [ ] ret;
    if (jj_2_15(2)) {
      ret = primaryKeyConstraint();
    {if (true) return ret;}
    } else if (jj_2_16(2)) {
      ret = referentialConstraint();
    {if (true) return ret;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String [ ] primaryKeyConstraint() throws ParseException {
  String [ ] ret;
  String [ ] s;
    jj_consume_token(PRIMARY_KEY);
    s = columnNameList();
    ret = new String [ s.length + 1 ];
    ret [ 0 ] = "primary";
    for (int i = 0; i < s.length; i++)
    {
      ret [ i + 1 ] = s [ i ];
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public String [ ] referentialConstraint() throws ParseException {
  String [ ] ret;
  String [ ] refNameList;
  String [ ] realNameList;
  String tName;
    jj_consume_token(FOREIGN_KEY);
    refNameList = columnNameList();
    jj_consume_token(REFERENCES);
    tName = tableName();
    realNameList = columnNameList();
    if (refNameList.length != realNameList.length)
    {
    //referenceTypeError
    }
    ret = new String [ (refNameList.length + 1) * 2 ];
    ret [ 0 ] = "foreign";
    ret [ 1 ] = tName;
    for (int i = 1; i <= refNameList.length; i++)
    {
      ret [ 2 * i ] = refNameList [ i - 1 ];
      ret [ 2 * i + 1 ] = realNameList [ i - 1 ];
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public String [ ] columnNameList() throws ParseException {
  ArrayList < String > ret;
  String s;
    ret = new ArrayList < String > ();
    jj_consume_token(LEFT_PAREN);
    s = columnName();
    ret.add(s);
    label_3:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      s = columnName();
      ret.add(s);
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return (String [ ]) ret.toArray(new String [ 0 ]);}
    throw new Error("Missing return statement in function");
  }

  static final public Token [ ] dataType() throws ParseException {
  Token [ ] ret;
    ret = new Token [ 2 ];
    if (jj_2_18(2)) {
      ret [ 0 ] = jj_consume_token(INT);
      ret [ 1 ] = null;
    } else if (jj_2_19(2)) {
      ret [ 0 ] = jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      ret [ 1 ] = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
    } else if (jj_2_20(2)) {
      ret [ 0 ] = jj_consume_token(DATE);
      ret [ 1 ] = null;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public String tableName() throws ParseException {
  String s;
  Token t;
    s = "";
    label_4:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_4;
      }
      t = jj_consume_token(LEGAL_IDENTIFIER);
    s += t.image;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String columnName() throws ParseException {
  String s;
  Token t;
    s = "";
    label_5:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_5;
      }
      t = jj_consume_token(LEGAL_IDENTIFIER);
    s += t.image;
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

//drop table account;
  static final public void dropTableQuery() throws ParseException {
  String name;
    jj_consume_token(DROP_TABLE);
    name = tableName();
    dropTable(name.toLowerCase());
  }

//desc account;
  static final public void descQuery() throws ParseException {
  String name;
    jj_consume_token(DESC);
    name = tableName();
    desc(name.toLowerCase());
  }

//select customer_name, borrower.loan_number, amount from borrower, loan where borrower.loan_number = loan.loan_number and branch_name = 'Perryridge';
  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    selectList();
    tableExpression();
  }

  static final public void selectList() throws ParseException {
    label_6:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_6;
      }
      selectedColumn();
      jj_consume_token(COMMA);
    }
    selectedColumn();
  }

  static final public void selectedColumn() throws ParseException {
    if (jj_2_24(2)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
    if (jj_2_25(2)) {
      jj_consume_token(AS);
      columnName();
    } else {
      ;
    }
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    if (jj_2_26(2)) {
      whereClause();
    } else {
      ;
    }
  }

  static final public void fromClause() throws ParseException {
    jj_consume_token(FROM);
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referedTable();
    label_7:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      referedTable();
    }
  }

  static final public void referedTable() throws ParseException {
    tableName();
    if (jj_2_28(2)) {
      jj_consume_token(AS);
      tableName();
    } else {
      ;
    }
  }

  static final public void whereClause() throws ParseException {
    jj_consume_token(WHERE);
    booleanValueExpression();
  }

  static final public void booleanValueExpression() throws ParseException {
    booleanTerm();
    label_8:
    while (true) {
      if (jj_2_29(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(OR);
      booleanTerm();
    }
  }

  static final public void booleanTerm() throws ParseException {
    booleanFactor();
    label_9:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(AND);
      booleanFactor();
    }
  }

  static final public void booleanFactor() throws ParseException {
    if (jj_2_31(2)) {
      booleanTest();
    } else if (jj_2_32(2)) {
      jj_consume_token(NOT);
      booleanTest();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void booleanTest() throws ParseException {
    if (jj_2_33(2)) {
      predicate();
    } else if (jj_2_34(2)) {
      parenthesizedBooleanExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parenthesizedBooleanExpression() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void predicate() throws ParseException {
    if (jj_2_35(2)) {
      comparisonPredicate();
    } else if (jj_2_36(2)) {
      nullPredicate();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparisonPredicate() throws ParseException {
    compOperand();
    if (jj_2_37(2)) {
      jj_consume_token(COMP_OP);
    } else if (jj_2_38(2)) {
      jj_consume_token(EQUAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    compOperand();
  }

  static final public void compOperand() throws ParseException {
    if (jj_2_39(2)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
  }

  static final public void comparableValue() throws ParseException {
    if (jj_2_40(2)) {
      jj_consume_token(INT_VALUE);
    } else if (jj_2_41(2)) {
      jj_consume_token(CHAR_STRING);
    } else if (jj_2_42(2)) {
      jj_consume_token(DATE_VALUE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nullPredicate() throws ParseException {
    if (jj_2_43(2)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
    nullOperation();
  }

  static final public void nullOperation() throws ParseException {
    jj_consume_token(IS);
    if (jj_2_44(2)) {
      jj_consume_token(NOT);
    } else {
      ;
    }
    jj_consume_token(NULL);
  }

  static final public void showTablesQuery() throws ParseException {
    jj_consume_token(SHOW_TABLES);
    showTables();
  }

//insert into account values(9732, 12345);
  static final public void insertQuery() throws ParseException {
    jj_consume_token(INSERT_INTO);
    tableName();
    insertColumnsAndSource();
  }

  static final public void insertColumnsAndSource() throws ParseException {
    if (jj_2_45(2)) {
      columnNameList();
    } else {
      ;
    }
    valueList();
  }

  static final public void valueList() throws ParseException {
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value();
    label_10:
    while (true) {
      if (jj_2_46(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(COMMA);
      value();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void value() throws ParseException {
    if (jj_2_47(2)) {
      jj_consume_token(NULL);
    } else if (jj_2_48(2)) {
      comparableValue();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//delete from account where branch_name = 'Perryridge';
  static final public void deleteQuery() throws ParseException {
    jj_consume_token(DELETE_FROM);
    tableName();
    if (jj_2_49(2)) {
      whereClause();
    } else {
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(DELETE_FROM)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(FOREIGN_KEY)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(VALUES)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(PRIMARY_KEY)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(INSERT_INTO)) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(SHOW_TABLES)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(DESC)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(NOT_NULL)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(DROP_TABLE)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(DATE_VALUE)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_25()) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(CHAR_STRING)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(INT_VALUE)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(COMP_OP)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(CREATE_TABLE)) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HexagonDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[49];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HexagonDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HexagonDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HexagonDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HexagonDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HexagonDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HexagonDBMSParser(HexagonDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HexagonDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 49; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
