/* Generated By:JavaCC: Do not edit this line. HexagonDBMSParser.java */
import com.sleepycat.je.*;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

import java.io.*;


public class HexagonDBMSParser implements HexagonDBMSParserConstants {

  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_INSERT = 4;
  public static final int PRINT_DELETE = 5;
  public static final int PRINT_SELECT = 6;
  public static final int PRINT_SHOW_TABLES = 7;

  public static void main(String args []) throws ParseException
  {
    HexagonDBMSParser parser = new HexagonDBMSParser(System.in);

        //
        Environment hexaEnv = null;
        Database hexaDB = null;


        EnvironmentConfig envConf = new EnvironmentConfig();
        envConf.setAllowCreate(true);
        hexaEnv = new Environment(new File("db/"),envConf);

        DatabaseConfig dbConf = new DatabaseConfig();
        dbConf.setAllowCreate(true);
        dbConf.setSortedDuplicates(true);
        hexaDB = hexaEnv.openDatabase(null,"sampleDatabase",dbConf);

        /*
	//db insert
	Cursor cur = null;
	DatabaseEntry key;
	DatabaseEntry data;

	try {
	  cur=hexaDB.openCursor(null,null);
	  key= new DatabaseEntry("key".getBytes("UTF-8"));
	  data= new DatabaseEntry("data".getBytes("UTF-8"));
	  cur.put(key,data);
	}
	catch(DatabaseException de) {
	}
	catch(UnsupportedEncodingException e) {
	  e.printStackTrace();
	}


	//db search
	DatabaseEntry foundKey = new DatabaseEntry();
	DatabaseEntry foundData = new DatabaseEntry();

	cur.getFirst(foundKey,foundData,LockMode.DEFAULT);
	do {
	  String keyString = new String(foundKey.getData(),"UTF-8");
	  String dataString = new String(foundData.getData(),"UTF-8");
	}while(cur.getNext(foundKey,foundData,LockMode.DEFAULT) == OperationStatus.SUCCESS);
	*/




    while (true)
    {
      System.out.print("HexagonDB_2012-11253> ");
      try
      {
        if(!parser.command()){
          if(hexaDB != null) hexaDB.close();
          if(hexaEnv != null) hexaEnv.close();
        }

      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        e.printStackTrace();
        HexagonDBMSParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE:
        System.out.println("\u005c'CREATE TABLE\u005c' requested");
        break;
      case PRINT_DROP_TABLE :
        System.out.println("\u005c'DROP TABLE\u005c' requested");
        break;
      case PRINT_DESC:
        System.out.println("\u005c'DESC\u005c' requested");
        break;
      case PRINT_INSERT:
        System.out.println("\u005c'INSERT\u005c' requested");
        break;
      case PRINT_DELETE:
        System.out.println("\u005c'DELETE\u005c' requested");
        break;
      case PRINT_SELECT:
        System.out.println("\u005c'SELECT\u005c' requested");
        break;
      case PRINT_SHOW_TABLES:
        System.out.println("\u005c'SHOW TABLES\u005c' requested");
        break;
    }
  }

  static final public boolean command() throws ParseException {
    if (jj_2_1(3)) {
      queryList();
        {if (true) return true;}
    } else if (jj_2_2(3)) {
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
          {if (true) return false;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void queryList() throws ParseException {
  int q;
    label_1:
    while (true) {
      q = query();
      jj_consume_token(SEMICOLON);
      printMessage(q);
      if (jj_2_3(3)) {
        ;
      } else {
        break label_1;
      }
    }
  }

  static final public int query() throws ParseException {
  int q;
    if (jj_2_4(3)) {
      createTableQuery();
        q = PRINT_CREATE_TABLE;
    } else if (jj_2_5(3)) {
      dropTableQuery();
            q = PRINT_DROP_TABLE;
    } else if (jj_2_6(3)) {
      descQuery();
            q = PRINT_DESC;
    } else if (jj_2_7(3)) {
      insertQuery();
            q = PRINT_INSERT;
    } else if (jj_2_8(3)) {
      deleteQuery();
            q = PRINT_DELETE;
    } else if (jj_2_9(3)) {
      selectQuery();
            q = PRINT_SELECT;
    } else if (jj_2_10(3)) {
      showTablesQuery();
            q = PRINT_SHOW_TABLES;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

//create table account (account_number int not null,branch_name char(15),primary key(account_number));
  static final public void createTableQuery() throws ParseException {
    jj_consume_token(CREATE_TABLE);
    tableName();
    tableElementList();
  }

  static final public void tableElementList() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    tableElement();
    label_2:
    while (true) {
      if (jj_2_11(3)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMMA);
      tableElement();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void tableElement() throws ParseException {
    if (jj_2_12(3)) {
      columnDefinition();
    } else if (jj_2_13(3)) {
      tableConstraintDefinition();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void columnDefinition() throws ParseException {
    columnName();
    dataType();
    if (jj_2_14(3)) {
      jj_consume_token(NOT_NULL);
    } else {
      ;
    }
  }

  static final public void tableConstraintDefinition() throws ParseException {
    if (jj_2_15(3)) {
      primaryKeyConstraint();
    } else if (jj_2_16(3)) {
      referentialConstraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void primaryKeyConstraint() throws ParseException {
    jj_consume_token(PRIMARY_KEY);
    columnNameList();
  }

  static final public void referentialConstraint() throws ParseException {
    jj_consume_token(FOREIGN_KEY);
    columnNameList();
    jj_consume_token(REFERENCES);
    tableName();
    columnNameList();
  }

  static final public void columnNameList() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    columnName();
    label_3:
    while (true) {
      if (jj_2_17(3)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMMA);
      columnName();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void dataType() throws ParseException {
    if (jj_2_18(3)) {
      jj_consume_token(INT);
    } else if (jj_2_19(3)) {
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
    } else if (jj_2_20(3)) {
      jj_consume_token(DATE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void tableName() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_21(3)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(LEGAL_IDENTIFIER);
    }
  }

  static final public void columnName() throws ParseException {
    label_5:
    while (true) {
      if (jj_2_22(3)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(LEGAL_IDENTIFIER);
    }
  }

//drop table account;
  static final public void dropTableQuery() throws ParseException {
    jj_consume_token(DROP_TABLE);
    tableName();
  }

//desc account;
  static final public void descQuery() throws ParseException {
    jj_consume_token(DESC);
    tableName();
  }

//select customer_name, borrower.loan_number, amount from borrower, loan where borrower.loan_number = loan.loan_number and branch_name = 'Perryridge';
  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    selectList();
    tableExpression();
  }

  static final public void selectList() throws ParseException {
    label_6:
    while (true) {
      if (jj_2_23(3)) {
        ;
      } else {
        break label_6;
      }
      selectedColumn();
      jj_consume_token(COMMA);
    }
    selectedColumn();
  }

  static final public void selectedColumn() throws ParseException {
    if (jj_2_24(3)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
    if (jj_2_25(3)) {
      jj_consume_token(AS);
      columnName();
    } else {
      ;
    }
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    if (jj_2_26(3)) {
      whereClause();
    } else {
      ;
    }
  }

  static final public void fromClause() throws ParseException {
    jj_consume_token(FROM);
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referedTable();
    label_7:
    while (true) {
      if (jj_2_27(3)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      referedTable();
    }
  }

  static final public void referedTable() throws ParseException {
    tableName();
    if (jj_2_28(3)) {
      jj_consume_token(AS);
      tableName();
    } else {
      ;
    }
  }

  static final public void whereClause() throws ParseException {
    jj_consume_token(WHERE);
    booleanValueExpression();
  }

  static final public void booleanValueExpression() throws ParseException {
    booleanTerm();
    label_8:
    while (true) {
      if (jj_2_29(3)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(OR);
      booleanTerm();
    }
  }

  static final public void booleanTerm() throws ParseException {
    booleanFactor();
    label_9:
    while (true) {
      if (jj_2_30(3)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(AND);
      booleanFactor();
    }
  }

  static final public void booleanFactor() throws ParseException {
    if (jj_2_31(3)) {
      booleanTest();
    } else if (jj_2_32(3)) {
      jj_consume_token(NOT);
      booleanTest();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void booleanTest() throws ParseException {
    if (jj_2_33(3)) {
      predicate();
    } else if (jj_2_34(3)) {
      parenthesizedBooleanExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parenthesizedBooleanExpression() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void predicate() throws ParseException {
    if (jj_2_35(3)) {
      comparisonPredicate();
    } else if (jj_2_36(3)) {
      nullPredicate();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparisonPredicate() throws ParseException {
    compOperand();
    if (jj_2_37(3)) {
      jj_consume_token(COMP_OP);
    } else if (jj_2_38(3)) {
      jj_consume_token(EQUAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    compOperand();
  }

  static final public void compOperand() throws ParseException {
    if (jj_2_39(3)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
  }

  static final public void comparableValue() throws ParseException {
    if (jj_2_40(3)) {
      jj_consume_token(INT_VALUE);
    } else if (jj_2_41(3)) {
      jj_consume_token(CHAR_STRING);
    } else if (jj_2_42(3)) {
      jj_consume_token(DATE_VALUE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void nullPredicate() throws ParseException {
    if (jj_2_43(3)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
    nullOperation();
  }

  static final public void nullOperation() throws ParseException {
    jj_consume_token(IS);
    if (jj_2_44(3)) {
      jj_consume_token(NOT);
    } else {
      ;
    }
    jj_consume_token(NULL);
  }

  static final public void showTablesQuery() throws ParseException {
    jj_consume_token(SHOW_TABLES);
  }

//insert into account values(9732, 12345);
  static final public void insertQuery() throws ParseException {
    jj_consume_token(INSERT_INTO);
    tableName();
    insertColumnsAndSource();
  }

  static final public void insertColumnsAndSource() throws ParseException {
    if (jj_2_45(3)) {
      columnNameList();
    } else {
      ;
    }
    valueList();
  }

  static final public void valueList() throws ParseException {
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value();
    label_10:
    while (true) {
      if (jj_2_46(3)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(COMMA);
      value();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void value() throws ParseException {
    if (jj_2_47(3)) {
      jj_consume_token(NULL);
    } else if (jj_2_48(3)) {
      comparableValue();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//delete from account where branch_name = 'Perryridge';
  static final public void deleteQuery() throws ParseException {
    jj_consume_token(DELETE_FROM);
    tableName();
    if (jj_2_49(3)) {
      whereClause();
    } else {
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(INT_VALUE)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(INT_VALUE)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(FOREIGN_KEY)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(COMP_OP)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(PRIMARY_KEY)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(NOT_NULL)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_24()) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(CREATE_TABLE)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(DELETE_FROM)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(DESC)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(EXIT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(VALUES)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(DROP_TABLE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(INSERT_INTO)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(DATE_VALUE)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(CHAR_STRING)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HexagonDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[49];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HexagonDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HexagonDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HexagonDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HexagonDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HexagonDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HexagonDBMSParser(HexagonDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HexagonDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 49; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
